#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        root
    group       root
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # ssl version limit
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend main
    bind *:80
    # acl url_static       path_beg       -i /static /images /javascript /stylesheets
    # acl url_static       path_end       -i .jpg .gif .png .css .js
    # bind ssl certs (crt /etc/haproxy/certs/domain1.pem crt /etc/haproxy/certs/domain2.pem...)
    bind   *:443 ssl crt /etc/haproxy/certs/www.skjan.cf.pem

    option forwardfor

    # Define allow test IP
    acl network_allowed src 192.168.1.0/24

    # Define path for lets encrypt
    acl is_letsencrypt  path_beg   -i /.well-known/acme-challenge/
    use_backend letsencrypt if is_letsencrypt

    # Define hosts
    # acl test_domain hdr_dom(host) -i test.domain.com
    acl main_domain hdr_dom(host) -i www.skjan.cf

    # use_backend   static      if url_static
    # use_backend     web         if test_domain network_allowed
    use_backend     web         if main_domain

    # default_backend letsencrypt

    # Redirect port 80 to 443
    # But do not redirect letsencrypt since it checks port 80 and not 443
    # redirect scheme https code 301 if !{ ssl_fc } !is_letsencrypt

#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
# backend static
#     balance     roundrobin
#     server      static 127.0.0.1:4331 check

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
# ssl auto renew
backend letsencrypt
    server letsencrypt nginx:58588

backend web
    balance     roundrobin
    server  web_server1 apache:80 check
    # server  web2 192.168.1.30:80 check

# backend web2
#     balance     roundrobin
#     server web2_server1 192.168.1.1:80 check
